// Techmo Tribune TTS API  
// version: 1.1.0   
// authors: Dawid Skurzok, Paweł Jaciów  
// date:    2018-01-25  
syntax = "proto3";

package techmo.tribune;

// Service that implements Techmo Text-To-Speech (TTS) API.
//
// Service's `Synthesize` method accepts `SynthesizeRequest` object which contains whole phrase to be synthesized.  
// You have to put the phrase as a string in `text` field of `SynthesizeRequest`. The string has to be in orthographic form. In that string you can use several special tags which can be interpreted. Tags have to be in from `<tag>something special</tag>` and can occur in any place in text. Currently interpreted tags are:
//
// | Tag | Description | Example (input) | Example (output) |
// | --- | ----------- | --------------- | ---------------- |
// | **cardinal** | *cardinal number* | `<cardinal>7</cardinal>` | *siedem* |
// | **signed** | *number with sign* | `<signed>-15</signed>` | *minus piętnaście* |
// | **ordinal** | *ordinal number* | `<ordinal>1</ordinal>` | *pierwszy* |
// | **fraction** | *fractional number* | `<fraction>3/4</fraction>` | *trzy czwarte* |
// | **postal** | *postal code* | `<postal>30-020</postal>` | *trzydzieści zero dwadzieścia* |
// | **time** | *time* | `<time>22:00</time>` | *dwudziesta druga* |
// | **date** | *date* | `<date>12/05/2001</date>` | *dwunasty maja dwa tysiące jeden* |
//
// Note: when interpreting tags only nominal case is supported at the moment.
//
// You can set `SynthesizeConfig`'s fields to specify parameters of synthesis. Currently supported option is only `sample_rate_hertz`, which is desired sampling frequency (in hertz) of synthesized audio.
//
// `SynthesizeRequest` can be sent to the service via gRPC insecure channel (that does not require authentication).
//
// `Synthesize` returns synthesized audio in `SynthesizeResponse` as a stream. When reading from the stream you have to check if `SynthesizeResponse` contains `error` field. If it does you can print its `code` and `description`. No `error` field in `SynthesizeResponse` means everything worked fine and its `audio` contains byte `content` that can be appended to received audio samples with `sample_rate_hertz` sampling frequency in hertz. When receiving `SynthesizeResponse` with `audio` you have to check if its `end_of_stream` flag is set to true. When it is set to true it means service has fnished synthesis and you can save your wave file with received synthesized audio content.
service TTS
{
    // Returns audio signal with synthesized speech, given text and optional configuration.
    rpc Synthesize(SynthesizeRequest) returns (stream SynthesizeResponse);
}

// `SynthesizeRequest` is the top-level message sent by the client for
// the `Synthesize` method. It contains a text to be synthesized and a configuration.
message SynthesizeRequest
{
    // Text to be synthesized.
    string text = 1;

    // Configuration.
    SynthesizeConfig config = 2;
}

// Provides information to the synthesizer that specifies how to process the request.
message SynthesizeConfig
{
    // Desired sampling frequency in hertz of synthesized audio.
    int32 sample_rate_hertz = 1;

    // Use OggOpus compression and save to `.opus` file
    bool use_opus = 2;
}

// `SynthesizeResponse` is the only message returned to the client by
// `Synthesize`. A series of one or more `SynthesizeResponse`
// messages are streamed back to the client.
message SynthesizeResponse
{
    // Audio data corresponding to a portion of the text
    // that is currently being processed.
    AudioData audio = 1;

    // If set, specifies the error for the operation.
    Error error = 2;
}

// Audio data corresponding to a portion of the text
// that is currently being processed.
message AudioData
{
    // Sampling frequency in hertz.
    int32 sample_rate_hertz = 1;

    // Audio data bytes encoded by default as Linear PCM (uncompressed 16-bit signed little-endian samples).
    bytes content = 2;

    // Last message flag. If set to true, no more data will be sent.
    bool end_of_stream = 3;
}

// Indicates the type of the error for the operation.
enum ErrorCode
{
    UNKNOWN = 0;            // Unknown error.
    LICENCE = 1;            // Licence related error.
    TEXT_NORMALIZATION = 2; // Error during text normalization.
    TRANSCRIPTION = 3;      // Error during orthographic to phonetic transcription.
    SYNTHESIS = 4;          // Error during speech synthesis.
}

// Received error details.
message Error
{
    // Error code.
    ErrorCode code = 1;

    // Error description.
    string description = 2;
}
